# 핵심내용
- WEB + JDBC
- JSP(Java Server Page)
- Script Element
- directive
- JSP 기본객체

Servlet: html in java / compile 기반
JSP: java in html / script 기반(코딩) + compile 기반(실행)


# JSP: 선언부, 처리부, 출력부	
	>> JSP 스크립팅 요소 - 선언부: <%! ~ %>
	>> 스크립트릿(Scriptlet) - 처리부: <% ~ %>
	>> 표현식 - 출력부: <%= ~ %>
	
	
# JSP 지시자(Directive)
1. page Directive: <%@page ~ %>
	>> 속성: language, info, contentType, pageEncoding, import, session
	
2. include Directive: <%@include

3. taglib Directive

___________________________________________________________________________________________________________
<0918>
# frontend 과목 평가

.user-name => .userName 
	=> ["user-name"] : js 속성명에 연산 포함 시에 사용 방법

visibility: hidden; // 영역 차지
display: none; // 랜더링 되지 않음

[속성명 = "값"], [속성명 = '값'], [속성명 = 값]
[속성명 ^= "값"] : 시작값
[속성명 $= "값"] : 끝값
[속성명 *= "값"] : 포함
[속성명 ~= "값"] : <tag class = "common apple"> 이렇게 공백을 구분자로 한 단어를 포함하는 경우

setTimeout() / setInterval

block: 라인 이동, 영역(높이, 넓이) 설정 가능
inline: 라인불가(한줄), 영역 설정 불가
inline-block: 라인불가, 영역 설정 가능

css 3가지: 
	1. 인라인 방식
		<tag style="property-name: value; property-name: value">
	2. 내부 스타일
		<style> </style>
	3. 외부 스타일
		<linke href="" rel"">
		
		또는
		
		<style>
			@import url();
			추가 내부 스타일 변경 및 추가
		</style>

Math.random()

변수 선언만 하고 값 설정 하지 않으면 => undefined

______________________________________________________________________________________________________________
## Web Application(Web Component) 구성요소
1. 자바 소스코드: 서블릿, model, 기타 클래스
2. 환경설정파일(Deployment Descriptor)
	-- servlet 2.x: 필수 (web.xml)
	-- servlet 3.x: 선택, Annotation 추가 (서블릿 @WebServlet)	
3. Web UI(FrontEnd)
	-- html	
	-- css
	-- javascript (js lib: bootstrap 등)
4. 라이브러리
	-- *.jar
	-- 사용자, 벤더 제공, 오픈소스
	-- 직접 복사 또는 ,maven (의존관계 라이브러리 자동 다운) pom.xml 설정
	
## 웹 컨테이너
-- 서블릿/JSP 실행환경
	>> servlet/jsp 라이프 사이클 제어 (생성, 서비스, 소멸)
	>> 메모리 관리 

## 웹어플리케이션 배포 구조(SPEC) : WAS 운영(서비스) 환경구조
-- C:\TOMCAT\webapps>
	: 웹 어플리케이션 배포하는 기본 폴더
	
-- C:TOMCAT\webapps\context-path>
	: "context-path" 웹 어플리케이션 이름
	: 웹 서버에는 여러 개의 웹 어플리케이션 배포(설치) 가능
	: 웹 서버 여러 개의 웹 어플리케이션 중에서 하나의 컨텍스트를 "ROOT"로 지정 가능함
	: URL => http://ip:port/context-path
	: "ROOT" 컨텍스트 URL: => http://ip:port> context-path 지정하지 않음

-- C:TOMCAT\webapps\context-path>
	: 3. Web UI(FrontEnd)
	: sub, folder를 생성해서 관리함
	: css, js, img, member, border 등
	
-- C:TOMCAT\webapps\context-path>WEB-INF>
	: 2. 환경설정파일(Deployment Descriptor)
		-- servlet 2.x: 필수 (web.xml)

-- C:TOMCAT\webapps\context-path\WEB-INF\lib>
	: 4. 라이브러리
		-- *.jar

-- C:TOMCAT\webapps\context-path\WEB-INF\classes>
	: 1. 자바 소스코드: 서블릿, Model, 

## 웹어플리케이션 게발환경(eclipse) :IDE 개발 환경
-- 환경설정: Target Runtime(서버)
	Tomcat => elcipse\Servers> 복사

-- eclipse\project\T=JavaResources\scr> 
	1. 자바 소스코드: 서블릿, Model, 기타 클래스
-- eclipse\project\WebContent(project 생성 시에 폴더 변경 가능 - default)
	3. Web Ui(FrontEnd):
		=> html(static-contents), css, js, jsp(dynamic contents)
		
-- eclipse\project\WebContent\WEB-INF\lib
	: 4. 라이브러리: * .jar
	:pom.xml: 의존 관계 자동 설정
	: 사용자 라이브러리, 벤더로 부터 제공받은 라이브러리는 직접 위치 복사해야함
	
## 개발 완료 및 테스트를 위한 서버 배포 방법
-- 개발 프로젝트를 context-path.war 패키징
	=>  C: \TOMCAT\webapps> contenxt-path.war 복사
	=>	C: \TOMCAT\bin> start.bat(서버 구동), shutdown.bat(서버 중지),
	=> 서버 구동 시에 "context-paht.war" 자동으르 압축해제
	=> C: \TOMCAT\webapps\contenxt-path> 서버 구동 시에 서비스 시작
	
## Model2 Arch.(MVC Pattern)
-- Model: 
	: 자바 클래스 => DAO(DataSource Connection pool) => MyBatis F/W
	: 환경설정: contexts.xml (DB Resource 설정)
-- View : 
	=> html, css, js
	=> JSP(Java Server Page): dynamic contents
-- Controller
	=> Servlet: 요청 ~ 응답 제어
	
## JSP(Java Server Page)
-- 구성요소: html(css/js) + JSP 표준태그, jsp action tag, custom tag, EL/JSTL
-- VIEW 담당: 정적 + 동적 서비스 가능

## JSP 표준태그
-- 1. 주석태그
(1)
	<!-- HTML 주석: 응답 시에 전달됨, 따라서 사용자 소스 보기 가능 -->

(2) hello.jsp => (jsp 컨테이너) => hello_jsp.java 변환 시에 포함되는 주석	
	<% // 자바 한줄 주석 %>
	<% /* 자바 여러줄 주석 %>
	
(3)	hello.jsp => (jsp 컨테이너) => hello_jsp.java 변환 시에 포함되지 않는 주석	
	<%-- JSP 주석 --%>

-- 2. directive tag
	>> jsp 페이지에 대한 정보 설정
	>> <%@ 지시어태그 속성명="속성값" | 속성명='속성값' %>
		(1) page
			<%@ page 
				contentType="text/html;charser=utf-8"
				import="java.util.*, com.ssafy.model.MemberDto"
				errorPage="error처리하는페이지-url" | isErrorPage = "true"
			%>		
			<%@ import="java.util.* %> -> 이렇게 각각 써주는 것을 권장
		
		(2) include
			>> 조각 페이지 삽입
			>> <%@ include file="조각페이지url" %>
			>> <jsp:include page = "조각페이지url" />
			
		(3) taglib
			>> jsl 태그라이브러리 사용 설정
			>> <%@ taglib uri="" prefix="" %>

3. Declaration tag
	-- 멤버변수, 메서드 선언, jsp 라이프사이클 메서드 재정의
	-- <%! 멤버변수 선언; 메서드선언문(){}, 메서드재정의선언문(){} %>
	
4. Expression tag: 수식, 결과값을 반환하는 메서드 호출문, 변수명, new 클래스이름()
	-- <%= 결과값이오는수행문 %>
	-- ************** 수행문에 ;(세미콜론)이 와서는 안됨!!! *****************
	-- 예시:
		<%! String name = "김무준"; %>
		<%= name; %>
		=> out.println(name;); (error) => out.println(name);
	-- _jspService() {} 메서드의 body 서비스 수행코드로 자동 변환
	-- jsp페이지에서 서비스를 위한 코드 작성 시에 사용하는 태그
	
	
5. scriptlet tag
	-- <% jsp서비스를위한자바수행문; %>
	-- _jspService() {} 메서드의 body 서비스 수행코드로 자동 변환
	-- jsp페이지에서 서비스를 위한 코드 작성 시에 사용하는 서비스 로직 처리를 하는 태그

## 서블릿 라이프 사이클 메서드
1. init(ServletConfig) => init(): 사용자 서블릿 초기화 재정의
	=> 오류 발생된다면 정상 서비스 가능할까??

2. service(HttpsServletRequest, HttpServletResponse) 
	=> doGet() / doPost() -> 요청 시마다 반복 수행되는 서비스 메서드

3. destroy() =>: 자원해제, 기존 서블릿 변경, 서비스 중지 호출 시점

## JSP 라이프 사이클 메서드
-- JSPInit(): 사용자가 재정의 가능, 초기화
-- _jspService(): 
	>> 사용자 재정의 불가능, 
	>> <%= expression tag %> <% scriptlet tag %> 작성된 코드를 컨테이너가 자동으로 서비스 코드 변환함수
-- jspDestroy(): 사용자 재정의 가능, 자원해제

## .jsp 수행 방법(처리 방법)
1. hello.jsp 
	=> 2. hello_jsp.java: java source 자동 변환(translate)
	=> 3. hello_jsp.class: 자동 컴파일(compile)
	=> 4. jsp 라이프 사이클 기반 서비스 진행: 
		(1) 변환된 jsp 클래스 로딩
		(2) new instance(객체생성)
		(3) jspInit() 호출
		(4) _jspService(): <%= expression %> <% scriptlet tag %>
		(5) jspDestroy() 호출

## .jsp 디버깅 방법
hello.jsp ==> hello_jsp.java ==> hello_jsp.class ==> 서비스 정상 실행

## hello_jsp.java ==> hello_jsp.class 생성 위치
-- eclipse\workspace\.metadata ~

## jsp 내장객체
-- .jsp => .java 자동 변환 시에 _jspService() 메서드 내부에서 자동으로 생성, 제공되는 객체
-- request: HttpsServletRequest
-- response: HttpServletResponse
-- application: ServletContext (context-path 웹어플리케이션 당 1개 존재)
	=> 해당 웹어플리케이션에 있는 모든 서블릿, 모든 jsp가 공유하는 공유객체
	
-- config: ServletConfig (해당 서블릿에 대한 객체)
-- out: JspWriter
-- session: HttpSession
-- exception: <%@ isErrorPage="true">: Throwable

## 동적으로 attribute 설정하기 / 가져오기 / 삭제하기	
-- scope: application, session, request
-- 설정하기: setAttribute(K, V)
-- 가져오기: getAttribute(K): Object => 실제 객체 타입 형변환 해야함
-- 삭제하기: removerAttribute(K)
